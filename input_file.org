#+TITLE: User Interface File
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/
#+note: This file adds Brother Neffs code of checklist and things to be added when making the tables for the competitions
#+note: hello world Brother Neffs code of checklist and things to be added when making the tables for the competitions

_*NEFF CODE*_ 
* Code
  This hook function will ensure that only one item can be checked at a time
  in a list tagged with =:radio= as the value of the =attr_org= tag.
#+begin_src emacs-lisp :results silent
  (require 'dash)

  (defun check-hook-fn ()
    (when (-contains? (org-element-property
                       :attr_org
                       (org-element-property :parent (org-element-context)))
                      ":radio")
      (save-excursion
        (loop for el in (org-element-property :structure (org-element-context))
              do (goto-char (car el))
              (when (re-search-forward "\\[X\\]" (line-end-position) t)
                (replace-match "[ ]"))))
      (beginning-of-line)
      (re-search-forward "\\[\\s-\\]" (line-end-position) t)
      (replace-match "[X]")))

  (add-hook 'org-checkbox-statistics-hook 'check-hook-fn)
#+end_src

  Code to get and validate chosen list items.
#+begin_src emacs-lisp :results silent
  (require 'cl)
  (require 'org-element)

  (defun org-get-plain-list (name)
    "Get the org-element representation of a plain-list with NAME."
    (catch 'found
      (org-element-map
          (org-element-parse-buffer)
          'plain-list
        (lambda (plain-list)
          (when
              (string= name (org-element-property :name plain-list))
            (throw 'found plain-list))))))

  (defun get-checkbox-list-values (list-name)
    "Return the values of all the checked items in a checkbox list."
    (save-excursion
      (loop for el in (org-element-property
                       :structure
                       (org-get-plain-list list-name))
            if (string= (nth 4 el) "[X]")
            collect (let ((item (buffer-substring (first el) (first (last el)))))
                      (string-match "\\[X\\]\\s-\\(.*\\)$" item)
                      (match-string 1 item)))))

  (defun validate-radio-list (choices)
    "Validates that a just one choice was made then returns
      that choice, otherwise returns an error message."
    (if (= 1 (length choices))
        (first choices) "Invalid or unanswered."))
#+end_src

* Samples
** A Normal Checkbox List
#+name: groceries
  - [X] milk
  - [ ] eggs
  - [X] butter
  - [X] yogurt

** Radio Button Lists
#+attr_org: :radio
#+name: age
  - [ ] --
  - [X] Peewee
  - [ ] Preteen
  - [ ] Junior
  - [ ] Youth
  - [X] Collegiate
  - [ ] Adult
  - [ ] Senior

#+attr_org: :radio
#+name: level
  - [ ] --
  - [ ] Newcomer
  - [ ] Bronze
  - [X] Silver 1
  - [ ] Silver 2
  - [X] Gold 1
  - [ ] Gold 2
  - [ ] Open
  - [ ] Bonus
  - [ ] Novice
  - [ ] Pre-Champion
  - [ ] Champion

* Tests
#+BEGIN_SRC emacs-lisp :results raw
  (setq opl (org-get-plain-list "groceries")
        ans (org-element-property :name opl))
#+END_SRC

#+RESULTS:
groceries
groceries
groceries

#+BEGIN_SRC emacs-lisp :results raw
  (get-checkbox-list-values "groceries")
#+END_SRC

#+RESULTS:
(milk butter yogurt)
(milk butter)

#+BEGIN_SRC emacs-lisp :results raw
  (validate-radio-list (get-checkbox-list-values "age"))
#+END_SRC

#+RESULTS:
Invalid or unanswered.
Collegiate

#+BEGIN_SRC emacs-lisp :results raw
  (validate-radio-list (get-checkbox-list-values "level"))
#+END_SRC

#+RESULTS:
Invalid or unanswered.
Gold 1




_DANCE COMPETITION_
* Table Example 
  | Couple | 	A | 	B | 	C | 	D | 	E | 	F | 	G | 	H |
  |--------+-----+-----+-----+-----+-----+-----+-----+-----|
  |    111 |   7 |   7 |   7 |   7 |   7 |     |     |     |
  |    112 |   4 |   6 |   3 |   6 |   4 |     |     |     |
  |    113 |   1 |   5 |   2 |   3 |   5 |     |     |     |
  |    114 |   3 |   3 |   4 |   5 |   1 |     |     |     |
  |    115 |   2 |   1 |   1 |   2 |   2 |     |     |     |
  |    116 |   5 |   4 |   6 |   1 |   3 |     |     |     |
  |    117 |   6 |   2 |   5 |   4 |   6 |     |     |     |

  
   
Please enter the number of judges needed for the competition
NOTE: if the number does not appear in the list, you may type it in 
      where the '--' indicators are.
 
* Completed
** CODE
#+BEGIN_SRC elisp :results silent 
      (defun validate-input ()
        (validate-radio-list (get-checkbox-list-values "number-judges"))
        (validate-radio-list (get-checkbox-list-values "number-couples"))
        (validate-radio-list (get-checkbox-list-values "number-dances"))
        ;; if error message 
        )

      (defun format-list-item (list-item)
        (format "  - [%c] %s" (if check-all ?X ? ) list-item))

      (defun insert-org-list (lisp-list name &optional check-all)
        (let ((pos 0)
              (txt (mapconcat 'format-list-item lisp-list "\n")))
          (forward-line)
          (setq pos (point))
          (insert (concat "\n#+name: " name "\n"))
          (insert txt)
          (insert "\n")
          (goto-char pos)))

      (defun create-couples-list ()
        (insert-org-list (make-list num-couples "") "couples" t))

      (defun confirm-couples-list ()
        (setq couples (mapcar 'string-to-number
                              (get-checkbox-list-values "couples"))
              num-couples (length couples)))

      (defun header (num-judges)
        (let* ((start ?A) 
               (end (+ start num-judges -1)))
          (list (append '(Couple) (mapcar 'char-to-string (number-sequence start end))))))

      (defun body (num-couples)
        (loop for couple in couples
          collect (list couple)))

      (defun build-tables (num-judges num-couples)
        (append(header num-judges)(list 'hline)(body num-couples)))

    ;; initialize variables 
      (setq num-dances (string-to-number (car (get-checkbox-list-values "number-dances")))
            num-judges (string-to-number (car (get-checkbox-list-values "number-judges")))
            num-couples (string-to-number (car (get-checkbox-list-values "number-couples")))
            dance-symbols  (mapcar 'string-to-symbol (get-checkbox-list-values "dance-styles"))
            dance-results-symbols (make-results-symbols dance-list))
#+END_SRC


** Grab User Input
   
: Please enter the number of judges needed for the competition
: NOTE: if the number does not appear in the list, you may type it in 
:      where the '--' indicators are.

#+attr_org: :radio
#+name: number-judges
  - [ ] 3
  - [X] 5
  - [ ] 7
  - [ ] 9
  - [ ] 11
  - [ ] --

#+attr_org: :radio
#+name: number-couples
  - [ ] 3
  - [ ] 5
  - [X] 7
  - [ ] 9
  - [ ] 11
  - [ ] --

#+attr_org: :radio
#+name: number-dances
  - [ ] 3
  - [ ] 5
  - [X] 7
  - [ ] 9
  - [ ] 11
  - [ ] --

#+name: dance-styles
  - [ ] IS--Quickstep
  - [ ] IS--Slow Foxtrot
  - [ ] IS--Tango
  - [ ] IS--Viennese Waltz
  - [ ] IS--Waltz
  - [X] IL--Cha Cha
  - [ ] IL--Jive
  - [ ] IL--Paso Doble
  - [X] IL--Rumba
  - [ ] IL--Samba
  - [ ] AS--Foxtrot
  - [ ] AS--Tango
  - [ ] AS--Viennese Waltz
  - [ ] AS--Waltz
  - [ ] AR--Bolero
  - [ ] AR--Cha Cha
  - [X] AR--East Coast Swing
  - [X] AR--Mambo
  - [ ] AR--Rumba
  - [ ] Cabaret
  - [ ] Salsa
  - [ ] NY Hustle
  - [ ] Lindy
  - [ ] Swing
  - [ ] Two Step
  - [ ] West Coast Swing
  - [ ] Bonus Swing 

** VALIDATE THE INPUT 
#+BEGIN_SRC elisp :results silent
(validate-input)
#+END_SRC


** Create and Confirm Couples List

[[elisp:(create-couples-list)][Create Couples List]]

#+name: couples
  - [X] 111
  - [X] 112
  - [X] 113
  - [X] 114
  - [X] 115
  - [X] 116
  - [X] 117

[[elisp:(confirm-couples-list)][Confirm Couples List]]

** export as html button

  [[elisp:(org-open-file (org-html-export-to-html))][export as html]]

: The following code makes it so the export to html button will not ask for a prompt when executing.
#+BEGIN_SRC elisp :results silent
  (setq org-confirm-elisp-link-function nil)
#+END_SRC


** CONSTRUCT TABLE

#+BEGIN_SRC elisp : results value
(build-tables num-judges num-couples)
#+END_SRC

#+RESULTS:
| Couple | A | B | C |
|--------+---+---+---|
|    111 |   |   |   |
|    112 |   |   |   |
|    113 |   |   |   |
|    114 |   |   |   |
|    115 |   |   |   |
|    116 |   |   |   |
|    117 |   |   |   |

* DEVELOPMENT ARENA
*** TODO _Automate Table_

**** _NAME THE DANCE_
#+BEGIN_SRC elisp :results silent
  (setq dance "cha-cha")
#+END_SRC

This create a variable named after the dance + table and the table
#+BEGIN_SRC elisp
  (set (intern (concat dance "-table")) (build-tables num-judges num-couples))
#+END_SRC

#+RESULTS:
| Couple | A | B | C | D | E |
|--------+---+---+---+---+---|
|        |   |   |   |   |   |
|        |   |   |   |   |   |
|        |   |   |   |   |   |
|        |   |   |   |   |   |
|        |   |   |   |   |   |
|        |   |   |   |   |   |
|        |   |   |   |   |   |
|        |   |   |   |   |   |

#+BEGIN_SRC elisp 
  cha-cha-table
#+END_SRC


**** _search backwards and replace name_

#+BEGIN_SRC elisp
  (when (search-backward (format "%c+RESULTS:" ?#) nil t)
    (replace-match (concat "#+name: " (symbol-name 'cha-cha-table)) t))  
#+END_SRC


**** _Set Table Name_

#+BEGIN_SRC elisp
(setq dance "salsa")
#+END_SRC

#+RESULTS:
: salsa

#+BEGIN_SRC elisp :results silent
  (defun set-table-name (table-name)
  (when (search-backward (format "%c+RESULTS:" ?#) nil t)
      (replace-match (concat "#+NAME: " table-name) t)))

  (defun stn ()
    (interactive)
    (set-table-name t-name))
#+END_SRC

#+BEGIN_SRC elisp
  (set (intern (setq t-name (concat dance "-table"))) (build-tables num-judges num-couples)) 
#+END_SRC

#+NAME: cha-cha-table
| Couple | A | B | C | D | E |
|--------+---+---+---+---+---|
|    111 | 7 | 7 | 7 | 7 | 7 |
|        |   |   |   |   |   |
|        |   |   |   |   |   |
|        |   |   |   |   |   |
|        |   |   |   |   |   |
|        |   |   |   |   |   |
|        |   |   |   |   |   |
|        |   |   |   |   |   |


#+BEGIN_SRC elisp :var cha-cha=cha-cha-table
  (set (intern (setq t-name (concat dance "-table"))) cha-cha)
#+END_SRC

[[elisp:(set-table-name%20t-name)][Set Table Name]]


*** Results Table
#+BEGIN_SRC elisp 
  (defun results-table (num-couples couples)
  (append (list (append '(Couples) '(Rank)))
    (list 'hline)(body num-couples)))
#+END_SRC

#+RESULTS:
: results-table

#+BEGIN_SRC elisp
(results-table num-couples couples)
#+END_SRC

#+RESULTS:
| Couples | Rank |
|---------+------|
|     111 |      |
|     112 |      |
|     113 |      |
|     114 |      |
|     115 |      |
|     116 |      |
|     117 |      |


#+BEGIN_SRC emacs-lisp :results code
  (defun string-to-symbol (string)
    (intern (downcase (replace-regexp-in-string " " "-" string))))
#+END_SRC

#+RESULTS:
#+BEGIN_SRC emacs-lisp
string-to-symbol
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun make-results-symbols (dance-symbols)
    (mapcar 'make-results-symbol dance-symbols))
#+END_SRC

#+RESULTS:
: make-results-symbols

#+BEGIN_SRC emacs-lisp
  (defun make-results-symbol (dance-symbol)
    (intern (concat (symbol-name dance-symbol) "-results")))
#+END_SRC
#+RESULTS:
: make-results-symbol

#+BEGIN_SRC emacs-lisp
  (make-results-symbols dance-list)
#+END_SRC

#+RESULTS:
| is--viennese-waltz-results | il--jive-results | il--samba-results | ar--east-coast-swing-results | salsa-results |
