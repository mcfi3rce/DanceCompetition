 This file adds Brother Neffs code of checklist and things to be added when making the tables for the competitions


_*NEFF CODE*_ 
* Code
  This hook function will ensure that only one item can be checked at a time
  in a list tagged with =:radio= as the value of the =attr_org= tag.
#+begin_src emacs-lisp :results silent
  (require 'dash)

  (defun check-hook-fn ()
    (when (-contains? (org-element-property
                       :attr_org
                       (org-element-property :parent (org-element-context)))
                      ":radio")
      (save-excursion
        (loop for el in (org-element-property :structure (org-element-context))
              do (goto-char (car el))
              (when (re-search-forward "\\[X\\]" (line-end-position) t)
                (replace-match "[ ]"))))
      (beginning-of-line)
      (re-search-forward "\\[\\s-\\]" (line-end-position) t)
      (replace-match "[X]")))

  (add-hook 'org-checkbox-statistics-hook 'check-hook-fn)
#+end_src

  Code to get and validate chosen list items.
#+begin_src emacs-lisp :results silent
  (require 'cl)
  (require 'org-element)

  (defun org-get-plain-list (name)
    "Get the org-element representation of a plain-list with NAME."
    (catch 'found
      (org-element-map
          (org-element-parse-buffer)
          'plain-list
        (lambda (plain-list)
          (when
              (string= name (org-element-property :name plain-list))
            (throw 'found plain-list))))))

  (defun get-checkbox-list-values (list-name)
    "Return the values of all the checked items in a checkbox list."
    (save-excursion
      (loop for el in (org-element-property
                       :structure
                       (org-get-plain-list list-name))
            if (string= (nth 4 el) "[X]")
            collect (let ((item (buffer-substring (first el) (first (last el)))))
                      (string-match "\\[X\\]\\s-\\(.*\\)$" item)
                      (match-string 1 item)))))

  (defun validate-radio-list (choices)
    "Validates that a just one choice was made then returns
      that choice, otherwise returns an error message."
    (if (= 1 (length choices))
        (first choices) "Invalid or unanswered."))
#+end_src

* Samples
** A Normal Checkbox List
#+name: groceries
  - [X] milk
  - [ ] eggs
  - [X] butter
  - [X] yogurt

** Radio Button Lists
#+attr_org: :radio
#+name: age
  - [ ] --
  - [X] Peewee
  - [ ] Preteen
  - [ ] Junior
  - [ ] Youth
  - [X] Collegiate
  - [ ] Adult
  - [ ] Senior

#+attr_org: :radio
#+name: level
  - [ ] --
  - [ ] Newcomer
  - [ ] Bronze
  - [X] Silver 1
  - [ ] Silver 2
  - [X] Gold 1
  - [ ] Gold 2
  - [ ] Open
  - [ ] Bonus
  - [ ] Novice
  - [ ] Pre-Champion
  - [ ] Champion

* Tests
#+BEGIN_SRC emacs-lisp :results raw
  (setq opl (org-get-plain-list "groceries")
        ans (org-element-property :name opl))
#+END_SRC

#+RESULTS:
groceries
groceries

#+BEGIN_SRC emacs-lisp :results raw
  (get-checkbox-list-values "groceries")
#+END_SRC

#+RESULTS:
(milk butter yogurt)
(milk butter)

#+BEGIN_SRC emacs-lisp :results raw
  (validate-radio-list (get-checkbox-list-values "age"))
#+END_SRC

#+RESULTS:
Invalid or unanswered.
Collegiate

#+BEGIN_SRC emacs-lisp :results raw
  (validate-radio-list (get-checkbox-list-values "level"))
#+END_SRC

#+RESULTS:
Invalid or unanswered.
Gold 1



* -- *BUILD TABLES* --



** :example of table: 
  | Couple | 	A | 	B | 	C | 	D | 	E | 	F | 	G | 	H |
  |--------+-----+-----+-----+-----+-----+-----+-----+-----|
  |    111 |   7 |   7 |   7 |   7 |   7 |     |     |     |
  |    112 |   4 |   6 |   3 |   6 |   4 |     |     |     |
  |    113 |   1 |   5 |   2 |   3 |   5 |     |     |     |
  |    114 |   3 |   3 |   4 |   5 |   1 |     |     |     |
  |    115 |   2 |   1 |   1 |   2 |   2 |     |     |     |
  |    116 |   5 |   4 |   6 |   1 |   3 |     |     |     |
  |    117 |   6 |   2 |   5 |   4 |   6 |     |     |     |


**  _*DanceCompetition*_

Please enter the number of judges needed for the competition
NOTE: if the number does not appear in the list, you may type it in 
      where the '--' indicators are.

#+attr_org: :radio
#+name: number_judges
  - [X] 3
  - [ ] 5
  - [ ] 7
  - [ ] 9
  - [ ] 11
  - [ ] --

#+attr_org: :radio
#+name: number_couples
  - [ ] 3
  - [X] 5
  - [ ] 7
  - [ ] 9
  - [ ] 11
  - [ ] --

#+attr_org: :radiod
#+name: number_dances
  - [X] 3
  - [ ] 5
  - [ ] 7
  - [ ] 9
  - [ ] 11
  - [ ] --

**  _VALIDATE THE INPUT_ 
#+BEGIN_SRC emacs-lisp
  (validate-radio-list (get-checkbox-list-values "number_judges"))
#+END_SRC

#+RESULTS:
: 3
 
#+BEGIN_SRC emacs-lisp
  (validate-radio-list (get-checkbox-list-values "number_couples"))
#+END_SRC

#+RESULTS:
: 5

#+BEGIN_SRC emacs-lisp
  (validate-radio-list (get-checkbox-list-values "number_dances"))
#+END_SRC

#+RESULTS:
: 3


** _SETUP THE VARIABLES_
#+BEGIN_SRC elisp :results silent
(setf num_dances (get-checkbox-list-values "number_dances"))
#+END_SRC

#+RESULTS:
| 3 |

#+BEGIN_SRC elisp :return value 
(symbol-value 'num_dances)
#+END_SRC   

#+RESULTS:
| 3 |

#+BEGIN_SRC elisp :results raw
(setq num_judges (get-checkbox-list-values "number_judges"))
#+END_SRC

#+RESULTS:
(3)
(3)

#+BEGIN_SRC elisp :results silent
(setf num_couples (get-checkbox-list-values "number_couples"))
#+END_SRC


** TODO _Automate Table_

#+BEGIN_SRC elisp results oututs 
(defun build-tables (num_judges num_couples num_dances)
)
#+END_SRC


#+BEGIN_SRC elisp 
  (defun printer ()
   (print "| Couple |")
   (loop for i in 10
    (print "couples")
    (+ i 1))
    )
#+END_SRC

#+RESULTS:
: printer

#+BEGIN_SRC elisp :results raw
(printer)
#+END_SRC

#+RESULTS:
:  A |

#+BEGIN_SRC elisp
(format "%s" (list 1 2 3))
#+END_SRC

#+RESULTS:
: (1 2 3)

#+BEGIN_SRC elisp :return value
;;(setf (num_judges (get-checkbox-list-value "number_judges")))
(symbol-value 'num_judges)
#+END_SRC

#+RESULTS:
| 3 |


#+BEGIN_SRC elisp :return value 
  (setq j-letters '(A B C D E))


  (defun header (num_judges)
    (list (append '(couple) (subseq j-letters 0 (truncate (car num_judges))))))

#+END_SRC

#+RESULTS:
: header

#+BEGIN_SRC elisp
(header num_judges)
#+END_SRC

#+RESULTS:
| couple | A | B | C | D | E |


