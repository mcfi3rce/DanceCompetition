#+tblname: dances
| Couple | 	A | 	B | 	C | 	D | 	E | 	F | 	G | 	H |
|--------+-----+-----+-----+-----+-----+-----+-----+-----|
|    111 |   7 |   7 |   7 |   7 |   7 |     |     |     |
|    112 |   4 |   6 |   3 |   6 |   4 |     |     |     |
|    113 |   1 |   5 |   2 |   3 |   5 |     |     |     |
|    114 |   3 |   3 |   4 |   5 |   1 |     |     |     |
|    115 |   2 |   1 |   1 |   2 |   2 |     |     |     |
|    116 |   5 |   4 |   6 |   1 |   3 |     |     |     |
|    117 |   6 |   2 |   5 |   4 |   6 |     |     |     |

#+name: totals
#+BEGIN_SRC emacs-lisp :var dances=dances :results value

  (setq dancers-line (append `(,(mapcar 'first dances) hline)))
  (setq dancers (mapcar 'first dances))
  (setq majority (calculate-majority (cdr (first dances))))

  (defun extract-place (n dances)
    (mapcar (lambda (row)
              (loop for score in (remove-if 'stringp row)
                    count (= n score)))
            dances))

  (defun calculate-majority (row)
    (1+ (/ (length (remove-if 'stringp row)) 2)))

  (append dancers-line 
          (loop for place from 1 to 8
                collect (extract-place place dances)))
#+END_SRC

#+RESULTS: totals
| 111 | 112 | 113 | 114 | 115 | 116 | 117 |
|-----+-----+-----+-----+-----+-----+-----|
|   0 |   0 |   1 |   1 |   2 |   1 |   0 |
|   0 |   0 |   1 |   0 |   3 |   0 |   1 |
|   0 |   1 |   1 |   2 |   0 |   1 |   0 |
|   0 |   2 |   0 |   1 |   0 |   1 |   1 |
|   0 |   0 |   2 |   1 |   0 |   1 |   1 |
|   0 |   2 |   0 |   0 |   0 |   1 |   2 |
|   5 |   0 |   0 |   0 |   0 |   0 |   0 |
|   0 |   0 |   0 |   0 |   0 |   0 |   0 |

#+BEGIN_SRC emacs-lisp :var totals=totals
  (defun ++ (l1 l2)
    (mapcar* '+ l1 l2))
  (setq first (first totals)
          second (++ first (second totals))
          third (++ second (third totals))
          fourth (++ third (fourth totals))
          fifth (++ fourth (fifth totals))
          sixth (++ fifth  (sixth totals))
          seventh (++ sixth (seventh totals))
          all (list first second third fourth fifth sixth seventh))
  (append dancers all)
#+END_SRC

#+RESULTS:
| 111 | 112 | 113 | 114 | 115 | 116 | 117 |
|-----+-----+-----+-----+-----+-----+-----|
|   0 |   0 |   1 |   1 |   2 |   1 |   0 |
|   0 |   0 |   2 |   1 |   5 |   1 |   1 |
|   0 |   1 |   3 |   3 |   5 |   2 |   1 |
|   0 |   3 |   3 |   4 |   5 |   3 |   2 |
|   0 |   3 |   5 |   5 |   5 |   4 |   3 |
|   0 |   5 |   5 |   5 |   5 |   5 |   5 |
|   5 |   5 |   5 |   5 |   5 |   5 |   5 |

#+BEGIN_SRC emacs-lisp :results raw
  ;; Testing first place 
  (defun find-winner (row)
    (catch 'dancer
      (mapcar (lambda (x)
                (if (>= x majority)
                    (throw 'dancer (position x row)))) row)))
(elt dancers (find-winner third))
#+END_SRC

#+RESULTS:
113
115
4
find-winner
4
4
(nil nil nil nil 4 nil nil)




#+tblname: places-cha-cha
#+RESULTS:


| No.     | 1 | 1-2 | 1-3 | 1-4 | 1-5 | 1-6 | 1-7 | 1-8 |
|---------+---+-----+-----+-----+-----+-----+-----+-----|
| dancers |   |     |     |     |     |     |     |     |
| dancers |   |     |     |     |     |     |     |     |

| group | round 1 | round 2 | round 3 | round 4 |
|-------+---------+---------+---------+---------|
| A     |       1 |       2 |       3 |       3 |
| B     |     4.7 |      11 |         |         |
| C     |         |         |         |         |
| D     |       5 |         |         |         |
| E     |         |     7.2 |         |         |
| F     |     3.2 |     4.3 |         |         |
| G     |         |     4.4 |         |         |
| H     |         |       8 |         |         |
| I     |     2.2 |         |         |         |
|-------+---------+---------+---------+---------|
| total | missing |       1 |       1 |         |
 #+TBLFM: @>$3='(length(org-lookup-all "1" '(@2$2..@2$>) nil)) @>$4 = (+ @>3 1) 
